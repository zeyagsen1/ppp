32
Chapter 2.
Finite Automata and Regular Languages
and, for k ≥1,
Ak = AAk−1,
i.e., Ak is the concatenation of the two languages A and Ak−1. Then we have
A∗=
∞
[
k=0
Ak.
Theorem 2.3.1 The set of regular languages is closed under the union op-
eration, i.e., if A and B are regular languages over the same alphabet Σ, then
A ∪B is also a regular language.
Proof.
Since A and B are regular languages, there are ﬁnite automata
M1 = (Q1, Σ, δ1, q1, F1) and M2 = (Q2, Σ, δ2, q2, F2) that accept A and B,
respectively. In order to prove that A ∪B is regular, we have to construct a
ﬁnite automaton M that accepts A ∪B. In other words, M must have the
property that for every string w ∈Σ∗,
M accepts w ⇔M1 accepts w or M2 accepts w.
As a ﬁrst idea, we may think that M could do the following:
• Starting in the start state q1 of M1, M “runs” M1 on w.
• If, after having read w, M1 is in a state of F1, then w ∈A, thus
w ∈A ∪B and, therefore, M accepts w.
• On the other hand, if, after having read w, M1 is in a state that is not
in F1, then w ̸∈A and M “runs” M2 on w, starting in the start state
q2 of M2. If, after having read w, M2 is in a state of F2, then we know
that w ∈B, thus w ∈A ∪B and, therefore, M accepts w. Otherwise,
we know that w ̸∈A ∪B, and M rejects w.
This idea does not work, because the ﬁnite automaton M can read the input
string w only once. The correct approach is to run M1 and M2 simulta-
neously. We deﬁne the set Q of states of M to be the Cartesian product
Q1 × Q2. If M is in state (r1, r2), this means that
• if M1 would have read the input string up to this point, then it would
be in state r1, and
