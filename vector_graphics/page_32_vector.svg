24
Chapter 2.
Finite Automata and Regular Languages
• Every other binary string is rejected by the machine. Observe that each
such string is either empty, consists of 0s only, or has an odd number
of 0s following the rightmost 1.
We now come to the formal deﬁnition of a ﬁnite automaton:
Deﬁnition 2.2.1 A ﬁnite automaton is a 5-tuple M = (Q, Σ, δ, q, F), where
1. Q is a ﬁnite set, whose elements are called states,
2. Σ is a ﬁnite set, called the alphabet; the elements of Σ are called symbols,
3. δ : Q × Σ →Q is a function, called the transition function,
4. q is an element of Q; it is called the start state,
5. F is a subset of Q; the elements of F are called accept states.
You can think of the transition function δ as being the “program” of the
ﬁnite automaton M = (Q, Σ, δ, q, F). This function tells us what M can do
in “one step”:
• Let r be a state of Q and let a be a symbol of the alphabet Σ. If
the ﬁnite automaton M is in state r and reads the symbol a, then it
switches from state r to state δ(r, a). (In fact, δ(r, a) may be equal to
r.)
The “computer” that we designed in the toll gate example in Section 2.1
is a ﬁnite automaton. For this example, we have Q = {q0, q1, q2, q3, q4, q5},
Σ = {5, 10, 25}, the start state is q0, F = {q5}, and δ is given by the following
table:
5
10
25
q0
q1
q2
q5
q1
q2
q3
q5
q2
q3
q4
q5
q3
q4
q5
q5
q4
q5
q5
q5
q5
q5
q5
q5
The example given in the beginning of this section is also a ﬁnite automa-
ton. For this example, we have Q = {q1, q2, q3}, Σ = {0, 1}, the start state
is q1, F = {q2}, and δ is given by the following table:
