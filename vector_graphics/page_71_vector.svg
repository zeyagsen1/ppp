2.8.
Equivalence of regular expressions and regular languages 63
Now let k ≥1. Then we can write u = vwc, where v is a string in B,
w is the concatenation of k −1 strings of B, and c is a string of C. Deﬁne
y = wc. Observe that y is the concatenation of k −1 strings of B followed
by one string of C. Therefore, by induction, the string y is an element of L.
Hence, u = vy, where v is a string in B and y is a string in L. This shows
that u is a string in BL. Hence, u is a string in BL ∪C. Since BL ∪C = L,
it follows that u is a string in L. This completes the proof that B∗C ⊆L.
It remains to show that L ⊆B∗C. Let u be an arbitrary string in L,
and let ℓbe its length (i.e., ℓis the number of symbols in u). We prove by
induction on ℓthat u is a string in B∗C.
The base case is when ℓ= 0. Then u = ϵ. Since u ∈L and L = BL ∪C,
u is a string in BL ∪C. Since ϵ ̸∈B, u cannot be a string in BL. Hence, u
must be a string in C. Since C ⊆B∗C, it follows that u is a string in B∗C.
Let ℓ≥1. If u is a string in C, then u is a string in B∗C and we are done.
So assume that u is not a string in C. Since u ∈L and L = BL ∪C, u is a
string in BL. Hence, there are strings b ∈B and v ∈L such that u = bv.
Since ϵ ̸∈B, the length of b is at least one; hence, the length of v is less than
the length of u. By induction, v is a string in B∗C. Hence, u = bv, where
b ∈B and v ∈B∗C. This shows that u ∈B(B∗C). Since B(B∗C) ⊆B∗C,
it follows that u ∈B∗C.
Note that Lemma 2.8.2 holds for any language B that does not contain
the empty string ϵ. As an example, assume that B = ∅. Then the language
L satisﬁes the equation
L = BL ∪C = ∅L ∪C.
Using Theorem 2.7.4, this equation becomes
L = ∅∪C = C.
We now show that Lemma 2.8.2 also implies that L = C: Since ϵ ̸∈B,
Lemma 2.8.2 implies that L = B∗C, which, using Theorem 2.7.4, becomes
L = B∗C = ∅∗C = ϵC = C.
The conversion
We will now use Lemma 2.8.2 to prove that every DFA can be converted to
a regular expression.
